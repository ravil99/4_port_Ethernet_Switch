//Data CRC4 generated by http://www.easics.com/webtools/crctool
//1+x+x^4
function integer crc4_d12(input logic [3:0] crc4, input logic [11:0] data);
    bit [11:0] d;
    bit [ 3:0] c;
    bit [ 3:0] newcrc;
begin
    for (int i=0;i<12;i++)
        d[i] = data[11-i];
        
    c = crc4;

    newcrc[0] = d[11] ^ d[10] ^ d[9] ^ d[8] ^ d[6] ^ d[4] ^ d[3] ^ d[0] ^ c[0] ^ c[1] ^ c[2] ^ c[3];
    newcrc[1] = d[8]  ^ d[7]  ^ d[6] ^ d[5] ^ d[3] ^ d[1] ^ d[0] ^ c[0];
    newcrc[2] = d[9]  ^ d[8]  ^ d[7] ^ d[6] ^ d[4] ^ d[2] ^ d[1] ^ c[0] ^ c[1];
    newcrc[3] = d[10] ^ d[9]  ^ d[8] ^ d[7] ^ d[5] ^ d[3] ^ d[2] ^ c[0] ^ c[1] ^ c[2];
    
    crc4_d12 = newcrc;
end
endfunction


function integer crc4_d1(input logic [3:0] crc4, input logic data);
    bit [ 3:0] newcrc;
begin
    newcrc  = {crc4[2:0], crc4[3]^crc4[2]^data};

    crc4_d1 = newcrc;
end
endfunction


//Data CRC8 generated by http://www.easics.com/webtools/crctool
//1+x^4+x^5+x^8
function integer crc8_d4(input logic [7:0] crc8, input logic [3:0] data);
    bit [3:0] d;
    bit [7:0] c;
    bit [7:0] newcrc;
begin
    for (int i=0;i<4;i++)
     d[i] = data[3-i];

    c = crc8;

    newcrc[0] = d[3] ^ d[0] ^ c[4] ^ c[7];
    newcrc[1] = d[1] ^ c[5];
    newcrc[2] = d[2] ^ c[6];
    newcrc[3] = d[3] ^ c[7];
    newcrc[4] = d[3] ^ d[0] ^ c[0] ^ c[4] ^ c[7];
    newcrc[5] = d[3] ^ d[1] ^ d[0] ^ c[1] ^ c[4] ^ c[5] ^ c[7];
    newcrc[6] = d[2] ^ d[1] ^ c[2] ^ c[5] ^ c[6];
    newcrc[7] = d[3] ^ d[2] ^ c[3] ^ c[6] ^ c[7];
    
    crc8_d4 = newcrc;
end
endfunction

//CRC8: x^8+x^5+x^4
function integer crc8_d1(input logic [7:0] crc8, input logic data);
    bit [7:0] newcrc;
begin
    newcrc  = {crc8[6:5],crc8[4]^crc8[7]^data,crc8[3]^crc8[7]^data,crc8[2:0],crc8[7]^data};

    crc8_d1 = newcrc;
end
endfunction

  
//Data CRC8 generated by http://www.easics.com/webtools/crctool
//1+x^4+x^5+x^8
function integer crc8_d8(input logic [7:0] crc8, input logic [7:0] data);
    bit [7:0] d;
    bit [7:0] c;
    bit [7:0] newcrc;
begin
    for (int i=0;i<8;i++)
     d[i] = data[7-i];
    	
    c = crc8;

    newcrc[0] = d[6] ^ d[4] ^ d[3] ^ d[0] ^ c[0] ^ c[3] ^ c[4] ^ c[6];
    newcrc[1] = d[7] ^ d[5] ^ d[4] ^ d[1] ^ c[1] ^ c[4] ^ c[5] ^ c[7];
    newcrc[2] = d[6] ^ d[5] ^ d[2] ^ c[2] ^ c[5] ^ c[6];
    newcrc[3] = d[7] ^ d[6] ^ d[3] ^ c[3] ^ c[6] ^ c[7];
    newcrc[4] = d[7] ^ d[6] ^ d[3] ^ d[0] ^ c[0] ^ c[3] ^ c[6] ^ c[7];
    newcrc[5] = d[7] ^ d[6] ^ d[3] ^ d[1] ^ d[0] ^ c[0] ^ c[1] ^ c[3] ^ c[6] ^ c[7];
    newcrc[6] = d[7] ^ d[4] ^ d[2] ^ d[1] ^ c[1] ^ c[2] ^ c[4] ^ c[7];
    newcrc[7] = d[5] ^ d[3] ^ d[2] ^ c[2] ^ c[3] ^ c[5];
    crc8_d8 = newcrc;
end
endfunction

function integer crc8_d8_true(input logic [7:0] crc8, input logic [7:0] data);

    bit [7:0] d;
    bit [7:0] c;
    bit [7:0] newcrc;
begin
    d = data;
    c = crc8;

    newcrc[0] = d[6] ^ d[4] ^ d[3] ^ d[0] ^ c[0] ^ c[3] ^ c[4] ^ c[6];
    newcrc[1] = d[7] ^ d[5] ^ d[4] ^ d[1] ^ c[1] ^ c[4] ^ c[5] ^ c[7];
    newcrc[2] = d[6] ^ d[5] ^ d[2] ^ c[2] ^ c[5] ^ c[6];
    newcrc[3] = d[7] ^ d[6] ^ d[3] ^ c[3] ^ c[6] ^ c[7];
    newcrc[4] = d[7] ^ d[6] ^ d[3] ^ d[0] ^ c[0] ^ c[3] ^ c[6] ^ c[7];
    newcrc[5] = d[7] ^ d[6] ^ d[3] ^ d[1] ^ d[0] ^ c[0] ^ c[1] ^ c[3] ^ c[6] ^ c[7];
    newcrc[6] = d[7] ^ d[4] ^ d[2] ^ d[1] ^ c[1] ^ c[2] ^ c[4] ^ c[7];
    newcrc[7] = d[5] ^ d[3] ^ d[2] ^ c[2] ^ c[3] ^ c[5];
    
    crc8_d8_true = newcrc;
end
endfunction

//Data CRC8 generated by http://www.easics.com/webtools/crctool
//1+x^4+x^5+x^8
function integer crc8_d24(input logic [7:0] crc8, input logic [23:0] data);
    bit [23:0] d;
    bit [ 7:0] c;
    bit [ 7:0] newcrc;
begin
    for (int i=0;i<8;i++)
    	d[i] = data[7-i];
    	
   	for (int i=0;i<8;i++)
    	d[8+i] = data[15-i];
    	
   	for (int i=0;i<8;i++)
    	d[16+i] = data[23-i];
    	
    c = crc8;

    newcrc[0] = d[23] ^ d[21] ^ d[18] ^ d[15] ^ d[14] ^ d[11] ^ d[10] ^ d[9] ^ d[6] ^ d[4] ^ d[3] ^ d[0] ^ c[2] ^ c[5] ^ c[7];
    newcrc[1] = d[22] ^ d[19] ^ d[16] ^ d[15] ^ d[12] ^ d[11] ^ d[10] ^ d[7] ^ d[5] ^ d[4] ^ d[1] ^ c[0] ^ c[3] ^ c[6];
    newcrc[2] = d[23] ^ d[20] ^ d[17] ^ d[16] ^ d[13] ^ d[12] ^ d[11] ^ d[8] ^ d[6] ^ d[5] ^ d[2] ^ c[0] ^ c[1] ^ c[4] ^ c[7];
    newcrc[3] = d[21] ^ d[18] ^ d[17] ^ d[14] ^ d[13] ^ d[12] ^ d[9] ^ d[7] ^ d[6] ^ d[3] ^ c[1] ^ c[2] ^ c[5];
    newcrc[4] = d[23] ^ d[22] ^ d[21] ^ d[19] ^ d[13] ^ d[11] ^ d[9] ^ d[8] ^ d[7] ^ d[6] ^ d[3] ^ d[0] ^ c[3] ^ c[5] ^ c[6] ^ c[7];
    newcrc[5] = d[22] ^ d[21] ^ d[20] ^ d[18] ^ d[15] ^ d[12] ^ d[11] ^ d[8] ^ d[7] ^ d[6] ^ d[3] ^ d[1] ^ d[0] ^ c[2] ^ c[4] ^ c[5] ^ c[6];
    newcrc[6] = d[23] ^ d[22] ^ d[21] ^ d[19] ^ d[16] ^ d[13] ^ d[12] ^ d[9] ^ d[8] ^ d[7] ^ d[4] ^ d[2] ^ d[1] ^ c[0] ^ c[3] ^ c[5] ^ c[6] ^ c[7];
    newcrc[7] = d[23] ^ d[22] ^ d[20] ^ d[17] ^ d[14] ^ d[13] ^ d[10] ^ d[9] ^ d[8] ^ d[5] ^ d[3] ^ d[2] ^ c[1] ^ c[4] ^ c[6] ^ c[7];
    crc8_d24 = newcrc;
end
endfunction

//Data CRC8 generated by http://www.easics.com/webtools/crctool
//1+x^4+x^5+x^8
function integer crc8_d32(input logic [7:0] crc8, input logic [31:0] data);
    bit [31:0] d;
    bit [ 7:0] c;
    bit [ 7:0] newcrc;
begin
    for (int i=0;i<32;i++)
    	d[i] = data[31-i];
    	
    c = crc8;

    newcrc[0] = d[31] ^ d[25] ^ d[24] ^ d[23] ^ d[21] ^ d[18] ^ d[15] ^ d[14] ^ d[11] ^ d[10] ^ d[9] ^ d[6] ^ d[4] ^ d[3] ^ d[0] ^ c[0] ^ c[1] ^ c[7];
    newcrc[1] = d[26] ^ d[25] ^ d[24] ^ d[22] ^ d[19] ^ d[16] ^ d[15] ^ d[12] ^ d[11] ^ d[10] ^ d[7] ^ d[5] ^ d[4] ^ d[1] ^ c[0] ^ c[1] ^ c[2];
    newcrc[2] = d[27] ^ d[26] ^ d[25] ^ d[23] ^ d[20] ^ d[17] ^ d[16] ^ d[13] ^ d[12] ^ d[11] ^ d[8] ^ d[6] ^ d[5] ^ d[2] ^ c[1] ^ c[2] ^ c[3];
    newcrc[3] = d[28] ^ d[27] ^ d[26] ^ d[24] ^ d[21] ^ d[18] ^ d[17] ^ d[14] ^ d[13] ^ d[12] ^ d[9] ^ d[7] ^ d[6] ^ d[3] ^ c[0] ^ c[2] ^ c[3] ^ c[4];
    newcrc[4] = d[31] ^ d[29] ^ d[28] ^ d[27] ^ d[24] ^ d[23] ^ d[22] ^ d[21] ^ d[19] ^ d[13] ^ d[11] ^ d[9] ^ d[8] ^ d[7] ^ d[6] ^ d[3] ^ d[0] ^ c[0] ^ c[3] ^ c[4] ^ c[5] ^ c[7];
    newcrc[5] = d[31] ^ d[30] ^ d[29] ^ d[28] ^ d[22] ^ d[21] ^ d[20] ^ d[18] ^ d[15] ^ d[12] ^ d[11] ^ d[8] ^ d[7] ^ d[6] ^ d[3] ^ d[1] ^ d[0] ^ c[4] ^ c[5] ^ c[6] ^ c[7];
    newcrc[6] = d[31] ^ d[30] ^ d[29] ^ d[23] ^ d[22] ^ d[21] ^ d[19] ^ d[16] ^ d[13] ^ d[12] ^ d[9] ^ d[8] ^ d[7] ^ d[4] ^ d[2] ^ d[1] ^ c[5] ^ c[6] ^ c[7];
    newcrc[7] = d[31] ^ d[30] ^ d[24] ^ d[23] ^ d[22] ^ d[20] ^ d[17] ^ d[14] ^ d[13] ^ d[10] ^ d[9] ^ d[8] ^ d[5] ^ d[3] ^ d[2] ^ c[0] ^ c[6] ^ c[7];
    crc8_d32 = newcrc;
end
endfunction

//Ethernet CRC32 generated by http://www.easics.com/webtools/crctool
//1+x^1+x^2+x^4+x^5+x^7+x^8+x^10+x^11+x^12+x^16+x^22+x^23+x^26+x^32
function integer eth_crc32_4d(input integer crc32, input logic [3:0] data);
	bit [ 3:0] d;
    bit [31:0] c;
    bit [31:0] newcrc;
 begin
	 for (int i=0;i<4;i++)
    	d[i] = data[3-i];
		
    c = crc32;

    newcrc[0] = d[0] ^ c[28];
    newcrc[1] = d[1] ^ d[0] ^ c[28] ^ c[29];
    newcrc[2] = d[2] ^ d[1] ^ d[0] ^ c[28] ^ c[29] ^ c[30];
    newcrc[3] = d[3] ^ d[2] ^ d[1] ^ c[29] ^ c[30] ^ c[31];
    newcrc[4] = d[3] ^ d[2] ^ d[0] ^ c[0] ^ c[28] ^ c[30] ^ c[31];
    newcrc[5] = d[3] ^ d[1] ^ d[0] ^ c[1] ^ c[28] ^ c[29] ^ c[31];
    newcrc[6] = d[2] ^ d[1] ^ c[2] ^ c[29] ^ c[30];
    newcrc[7] = d[3] ^ d[2] ^ d[0] ^ c[3] ^ c[28] ^ c[30] ^ c[31];
    newcrc[8] = d[3] ^ d[1] ^ d[0] ^ c[4] ^ c[28] ^ c[29] ^ c[31];
    newcrc[9] = d[2] ^ d[1] ^ c[5] ^ c[29] ^ c[30];
    newcrc[10] = d[3] ^ d[2] ^ d[0] ^ c[6] ^ c[28] ^ c[30] ^ c[31];
    newcrc[11] = d[3] ^ d[1] ^ d[0] ^ c[7] ^ c[28] ^ c[29] ^ c[31];
    newcrc[12] = d[2] ^ d[1] ^ d[0] ^ c[8] ^ c[28] ^ c[29] ^ c[30];
    newcrc[13] = d[3] ^ d[2] ^ d[1] ^ c[9] ^ c[29] ^ c[30] ^ c[31];
    newcrc[14] = d[3] ^ d[2] ^ c[10] ^ c[30] ^ c[31];
    newcrc[15] = d[3] ^ c[11] ^ c[31];
    newcrc[16] = d[0] ^ c[12] ^ c[28];
    newcrc[17] = d[1] ^ c[13] ^ c[29];
    newcrc[18] = d[2] ^ c[14] ^ c[30];
    newcrc[19] = d[3] ^ c[15] ^ c[31];
    newcrc[20] = c[16];
    newcrc[21] = c[17];
    newcrc[22] = d[0] ^ c[18] ^ c[28];
    newcrc[23] = d[1] ^ d[0] ^ c[19] ^ c[28] ^ c[29];
    newcrc[24] = d[2] ^ d[1] ^ c[20] ^ c[29] ^ c[30];
    newcrc[25] = d[3] ^ d[2] ^ c[21] ^ c[30] ^ c[31];
    newcrc[26] = d[3] ^ d[0] ^ c[22] ^ c[28] ^ c[31];
    newcrc[27] = d[1] ^ c[23] ^ c[29];
    newcrc[28] = d[2] ^ c[24] ^ c[30];
    newcrc[29] = d[3] ^ c[25] ^ c[31];
    newcrc[30] = c[26];
    newcrc[31] = c[27];
    eth_crc32_4d = newcrc;
end
endfunction

function integer eth_crc32_8d(input integer crc32, input logic [7:0] data);
	bit [ 7:0] d;
    bit [31:0] c;
    bit [31:0] newcrc;
 begin
	 for (int i=0;i<8;i++)
    	d[i] = data[7-i];
		
    c = crc32;

    newcrc[0] = d[6] ^ d[0] ^ c[24] ^ c[30];
    newcrc[1] = d[7] ^ d[6] ^ d[1] ^ d[0] ^ c[24] ^ c[25] ^ c[30] ^ c[31];
    newcrc[2] = d[7] ^ d[6] ^ d[2] ^ d[1] ^ d[0] ^ c[24] ^ c[25] ^ c[26] ^ c[30] ^ c[31];
    newcrc[3] = d[7] ^ d[3] ^ d[2] ^ d[1] ^ c[25] ^ c[26] ^ c[27] ^ c[31];
    newcrc[4] = d[6] ^ d[4] ^ d[3] ^ d[2] ^ d[0] ^ c[24] ^ c[26] ^ c[27] ^ c[28] ^ c[30];
    newcrc[5] = d[7] ^ d[6] ^ d[5] ^ d[4] ^ d[3] ^ d[1] ^ d[0] ^ c[24] ^ c[25] ^ c[27] ^ c[28] ^ c[29] ^ c[30] ^ c[31];
    newcrc[6] = d[7] ^ d[6] ^ d[5] ^ d[4] ^ d[2] ^ d[1] ^ c[25] ^ c[26] ^ c[28] ^ c[29] ^ c[30] ^ c[31];
    newcrc[7] = d[7] ^ d[5] ^ d[3] ^ d[2] ^ d[0] ^ c[24] ^ c[26] ^ c[27] ^ c[29] ^ c[31];
    newcrc[8] = d[4] ^ d[3] ^ d[1] ^ d[0] ^ c[0] ^ c[24] ^ c[25] ^ c[27] ^ c[28];
    newcrc[9] = d[5] ^ d[4] ^ d[2] ^ d[1] ^ c[1] ^ c[25] ^ c[26] ^ c[28] ^ c[29];
    newcrc[10] = d[5] ^ d[3] ^ d[2] ^ d[0] ^ c[2] ^ c[24] ^ c[26] ^ c[27] ^ c[29];
    newcrc[11] = d[4] ^ d[3] ^ d[1] ^ d[0] ^ c[3] ^ c[24] ^ c[25] ^ c[27] ^ c[28];
    newcrc[12] = d[6] ^ d[5] ^ d[4] ^ d[2] ^ d[1] ^ d[0] ^ c[4] ^ c[24] ^ c[25] ^ c[26] ^ c[28] ^ c[29] ^ c[30];
    newcrc[13] = d[7] ^ d[6] ^ d[5] ^ d[3] ^ d[2] ^ d[1] ^ c[5] ^ c[25] ^ c[26] ^ c[27] ^ c[29] ^ c[30] ^ c[31];
    newcrc[14] = d[7] ^ d[6] ^ d[4] ^ d[3] ^ d[2] ^ c[6] ^ c[26] ^ c[27] ^ c[28] ^ c[30] ^ c[31];
    newcrc[15] = d[7] ^ d[5] ^ d[4] ^ d[3] ^ c[7] ^ c[27] ^ c[28] ^ c[29] ^ c[31];
    newcrc[16] = d[5] ^ d[4] ^ d[0] ^ c[8] ^ c[24] ^ c[28] ^ c[29];
    newcrc[17] = d[6] ^ d[5] ^ d[1] ^ c[9] ^ c[25] ^ c[29] ^ c[30];
    newcrc[18] = d[7] ^ d[6] ^ d[2] ^ c[10] ^ c[26] ^ c[30] ^ c[31];
    newcrc[19] = d[7] ^ d[3] ^ c[11] ^ c[27] ^ c[31];
    newcrc[20] = d[4] ^ c[12] ^ c[28];
    newcrc[21] = d[5] ^ c[13] ^ c[29];
    newcrc[22] = d[0] ^ c[14] ^ c[24];
    newcrc[23] = d[6] ^ d[1] ^ d[0] ^ c[15] ^ c[24] ^ c[25] ^ c[30];
    newcrc[24] = d[7] ^ d[2] ^ d[1] ^ c[16] ^ c[25] ^ c[26] ^ c[31];
    newcrc[25] = d[3] ^ d[2] ^ c[17] ^ c[26] ^ c[27];
    newcrc[26] = d[6] ^ d[4] ^ d[3] ^ d[0] ^ c[18] ^ c[24] ^ c[27] ^ c[28] ^ c[30];
    newcrc[27] = d[7] ^ d[5] ^ d[4] ^ d[1] ^ c[19] ^ c[25] ^ c[28] ^ c[29] ^ c[31];
    newcrc[28] = d[6] ^ d[5] ^ d[2] ^ c[20] ^ c[26] ^ c[29] ^ c[30];
    newcrc[29] = d[7] ^ d[6] ^ d[3] ^ c[21] ^ c[27] ^ c[30] ^ c[31];
    newcrc[30] = d[7] ^ d[4] ^ c[22] ^ c[28] ^ c[31];
    newcrc[31] = d[5] ^ c[23] ^ c[29];
    eth_crc32_8d = newcrc;
 end
 endfunction

function integer crc(input integer crc_type, input integer word, input integer crc_data, input integer data);
begin
    case (crc_type)
    //CRC4: x^4+x+1
    4: begin
        case (word)
		1		: crc = crc4_d1 (crc_data[3:0], data[ 0:0]);
        12      : crc = crc4_d12(crc_data[3:0], data[11:0]);
        default : crc = 0;
        endcase
    end
   //CRC8: x^8+x^5+x^4+1
    8: begin
        case (word)
		 1		: crc = crc8_d1 (crc_data[7:0], data[ 0:0]);
         4      : crc = crc8_d4 (crc_data[7:0], data[ 3:0]);
         8      : crc = crc8_d8 (crc_data[7:0], data[ 7:0]);
        24      : crc = crc8_d24(crc_data[7:0], data[23:0]);
        32      : crc = crc8_d32(crc_data[7:0], data[31:0]);
		default : crc = 0;
        endcase
    end
    //CRC8: x^8+x^5+x^4+1 reverse
    -8: begin
        case (word)
         4      : crc = crc8_d4     (crc_data[7:0], data[ 3:0]);
         8      : crc = crc8_d8_true(crc_data[7:0], data[ 7:0]);
        24      : crc = crc8_d24    (crc_data[7:0], data[23:0]);
        32      : crc = crc8_d32    (crc_data[7:0], data[31:0]);
        default : crc = 0;
        endcase
    end
    default: crc = 0;
    endcase
end
endfunction
